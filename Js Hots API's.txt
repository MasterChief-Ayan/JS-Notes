Js Hots API's

1) Get Request

Getting response from server takes time, so its a Asynchronous task (aka promise)

Eg;


fetch("<https://jsonplaceholder.typicode.com/posts/1>")

.then(response => response.json()) // Convert response to JSON

.then(data => {
  console.log(data); // Log the data to the console
})

.catch(error => {
  console.error("Fetch error:", error); // Handle errors
});

*********Simplified

fetch("<https://jsonplaceholder.typicode.com/posts/1>")
.then(response => response.json())
.then(data => console.log(data))
.catch(error => console.error("Fetch error:", error))



NOTE:
->here we want json data from server, thus using .json() in response.json()
->other include
.json() → for JSON data (most common for APIs).
.text() → for plain text responses (like HTML or text files).
.blob() → for binary data (like images, PDFs).
.arrayBuffer() → for low-level binary data processing.
.formData() → for handling multipart/form-data responses.
-> causes troble when printing with backticks !!



2)Post request

NECESSARY TO STRINGIFY BEFORE SENDING // Others usually remains the same

While posting its necessary to mention extra information of things to send

Also returns additional data with data that was sent for the confirmation


Eg;

const postData = {		//obj to be send as a jsonString
  title: "New Post",
  body: "This is the content of the new post.",
  userId: 1
};
const myURL="https://jsonplaceholder.typicode.com/posts";

fetch(myURL, {

  method: "POST", // Specify request method
  headers: {
    "Content-Type": "application/json" // Set content type to JSON
  },
  body: JSON.stringify(postData) // Convert data to JSON format********
})

.then(response => response.json()) //response from backend after sending
.then(data => {
  console.log("Successfully posted:", data); // Log the response data
 })
.catch(error => {
  console.error("Fetch error:", error);
});



//        HOTS

.ok property is a way to check whether the server responded correctly


fetch("<https://jsonplaceholder.typicode.com/posts/1>")
  .then(response => {
    if (!response.ok) {
      throw new Error("Network response was not ok");
    }
    return response.json();
  })
  .then(data => {
    console.log(data);
  })
  .catch(error => {
    console.error("Fetch error:", error);
  });

3) Mastering (Promises and Async Await)

->Promise creation   (  It's like a function   ) 
Syntax
"
<type> <var> = new Promise((resolve,reject) => { // todo})
"

NOTE: promise is a a sync function, so the next then...catch bloack will also be a async task.

const myPromise = new Promise((resolve, reject) => {
  const success = true;

  if (success) {
    resolve("Promise was successful!"); // resolve -> keyword
  } else {
    reject("Promise failed."); // reject -> keyword
  }
});



myPromise
  .then(result => {
    console.log(result); // Outputs: "Promise was successful!"
  })
  .catch(error => {
    console.error(error); // Would output: "Promise failed."
  });


-> Async Functions

Syntax
"
async function <funcName> (){

	try{
	 const <var>= await //task which takes time
	
	}
	catch(error){
	 //to do at error
	}
}
"


async function fetchData() {
  try {
    const response = await fetch("<https://jsonplaceholder.typicode.com/posts/1>");

    if (!response.ok) {
      throw new Error("Network response was not ok");
    }

    const data = await response.json();
    console.log("Fetched data:", data);
  } catch (error) {
    console.error("Fetch error:", error);
  }
}

fetchData();


